// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cache.proto

package cache

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CacheData struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheData) Reset()         { *m = CacheData{} }
func (m *CacheData) String() string { return proto.CompactTextString(m) }
func (*CacheData) ProtoMessage()    {}
func (*CacheData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{0}
}

func (m *CacheData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheData.Unmarshal(m, b)
}
func (m *CacheData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheData.Marshal(b, m, deterministic)
}
func (m *CacheData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheData.Merge(m, src)
}
func (m *CacheData) XXX_Size() int {
	return xxx_messageInfo_CacheData.Size(m)
}
func (m *CacheData) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheData.DiscardUnknown(m)
}

var xxx_messageInfo_CacheData proto.InternalMessageInfo

func (m *CacheData) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{1}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CacheData)(nil), "cache.CacheData")
	proto.RegisterType((*Nothing)(nil), "cache.Nothing")
}

func init() { proto.RegisterFile("cache.proto", fileDescriptor_5fca3b110c9bbf3a) }

var fileDescriptor_5fca3b110c9bbf3a = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4e, 0x4c, 0xce,
	0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x64, 0xb9, 0x38, 0x9d,
	0x41, 0x0c, 0x97, 0xc4, 0x92, 0x44, 0x21, 0x01, 0x2e, 0xe6, 0xe2, 0x92, 0x22, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x89, 0x93, 0x8b, 0xdd, 0x2f, 0xbf, 0x24, 0x23, 0x33, 0x2f,
	0xdd, 0xc8, 0x95, 0x8b, 0x0d, 0xac, 0xb2, 0x48, 0xc8, 0x9a, 0x4b, 0xd8, 0x3d, 0xb5, 0x24, 0x28,
	0x31, 0x2f, 0x25, 0x3f, 0x17, 0xa4, 0x2f, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x57, 0x88, 0x4f, 0x0f,
	0x62, 0x3e, 0x54, 0x83, 0x94, 0x00, 0x94, 0x0f, 0x37, 0x5f, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d,
	0x6c, 0xbd, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x75, 0x0d, 0x0b, 0xb8, 0x8d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CacherClient is the client API for Cacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacherClient interface {
	GetRandomDataStream(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Cacher_GetRandomDataStreamClient, error)
}

type cacherClient struct {
	cc *grpc.ClientConn
}

func NewCacherClient(cc *grpc.ClientConn) CacherClient {
	return &cacherClient{cc}
}

func (c *cacherClient) GetRandomDataStream(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Cacher_GetRandomDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cacher_serviceDesc.Streams[0], "/cache.Cacher/GetRandomDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacherGetRandomDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cacher_GetRandomDataStreamClient interface {
	Recv() (*CacheData, error)
	grpc.ClientStream
}

type cacherGetRandomDataStreamClient struct {
	grpc.ClientStream
}

func (x *cacherGetRandomDataStreamClient) Recv() (*CacheData, error) {
	m := new(CacheData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacherServer is the server API for Cacher service.
type CacherServer interface {
	GetRandomDataStream(*Nothing, Cacher_GetRandomDataStreamServer) error
}

// UnimplementedCacherServer can be embedded to have forward compatible implementations.
type UnimplementedCacherServer struct {
}

func (*UnimplementedCacherServer) GetRandomDataStream(req *Nothing, srv Cacher_GetRandomDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRandomDataStream not implemented")
}

func RegisterCacherServer(s *grpc.Server, srv CacherServer) {
	s.RegisterService(&_Cacher_serviceDesc, srv)
}

func _Cacher_GetRandomDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacherServer).GetRandomDataStream(m, &cacherGetRandomDataStreamServer{stream})
}

type Cacher_GetRandomDataStreamServer interface {
	Send(*CacheData) error
	grpc.ServerStream
}

type cacherGetRandomDataStreamServer struct {
	grpc.ServerStream
}

func (x *cacherGetRandomDataStreamServer) Send(m *CacheData) error {
	return x.ServerStream.SendMsg(m)
}

var _Cacher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cache.Cacher",
	HandlerType: (*CacherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomDataStream",
			Handler:       _Cacher_GetRandomDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cache.proto",
}
